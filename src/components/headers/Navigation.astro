---
import { Image } from "astro:assets";
import { getLocalizedSettings } from "@/lib/localization-helpers";
import { translatePath, unlocalizedUrl } from "@/lib/localization-helpers";
import { defaultLocale, locales } from "site";

const currentLocale = Astro.currentLocale;

function getTranslatedUrl(locale: string): string {
  const unlocalizedPath = unlocalizedUrl(Astro.url.pathname);
  return translatePath(locale, unlocalizedPath);
}

function isActiveLocale(locale: string): boolean {
  return locale === currentLocale;
}

const { header, contacts } = getLocalizedSettings(currentLocale);

const logoPath = header.logo?.imagePath;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/global/**/*.{webp,jpeg,jpg,png,gif,svg}"
);
---

<style>
  .menu-icon {
    position: relative;
    width: 50px;
    height: 50px;
    cursor: pointer;
  }
  .menu-icon .menu-icon__checkbox {
    display: block;
    width: 100%;
    height: 100%;
    position: relative;
    cursor: pointer;
    z-index: 2;
    -webkit-touch-callout: none;
    position: absolute;
    opacity: 0;
  }
  .menu-icon div {
    margin: auto;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    width: 22px;
    height: 12px;
  }
  .menu-icon span {
    position: absolute;
    display: block;
    width: 100%;
    height: 2px;
    background-color: var(--bar-bg, #000);
    border-radius: 5rem;
    transition: all 0.2s cubic-bezier(0.1, 0.82, 0.76, 0.965);
  }
  .menu-icon span:first-of-type {
    top: 0;
  }
  .menu-icon span:last-of-type {
    bottom: 0;
  }
  .menu-icon.active span:first-of-type,
  .menu-icon .menu-icon__checkbox:checked + div span:first-of-type {
    transform: rotate(45deg);
    top: 5px;
  }
  .menu-icon.active span:last-of-type,
  .menu-icon .menu-icon__checkbox:checked + div span:last-of-type {
    transform: rotate(-45deg);
    bottom: 5px;
  }
  .menu-icon.active:hover span:first-of-type,
  .menu-icon.active:hover span:last-of-type,
  .menu-icon:hover .menu-icon__checkbox:checked + div span:first-of-type,
  .menu-icon:hover .menu-icon__checkbox:checked + div span:last-of-type {
    width: 22px;
  }
  @media (min-width: 1024px) {
    .menu-icon:hover span:first-of-type {
      width: 26px;
    }
    .menu-icon:hover span:last-of-type {
      width: 12px;
    }
  }
  #navigation {
    pointer-events: none;
  }
  [data-nav-border-reveal] {
    --tw-border-opacity: 0;
  }
  .active-locale {
    font-weight: bolder;
  }
  .mask-rect {
    x: 0;
    fill: white;
  }
</style>

<style is:global>
  [data-nav-text-reveal] {
    opacity: 0;
  }
  [data-nav-text-reveal] > div {
    position: relative;
    margin: 0;
  }
  .split-parent {
    overflow: hidden;
  }
  .split-child {
    display: inline-block;
  }
</style>

<header class="fixed w-full z-30">
  <div
    class="items-center auto-cols-fr grid-cols-2 lg:grid-cols-2 grid-rows-[auto] justify-between left-0 py-3.5 px-6 lg:px-20 right-0 top-0 grid gap-4"
  >
    <div
      class="items-center flex-wrap justify-start relative flex text-blue-700 z-20"
    >
      <a
        href={translatePath(currentLocale ?? defaultLocale, "/")}
        id="header-logo"
        class="text-blue-700 justify-self-start lg:justify-self-center underline inline-block max-w-full"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 115.42 49.28"
          class="w-8 h-8 lg:w-10 lg:h-10"
        >
          <defs>
            <style>
              .cls-1 {
                fill: #231f20;
              }
              .cls-2 {
                isolation: isolate;
              }
              .cls-3 {
                mix-blend-mode: screen;
              }
            </style>
            <clipPath id="logo-mask">
              <rect x="0" y="0" width="115.42" height="49.28" class="mask-rect"
              ></rect>
            </clipPath>
          </defs>
          <g class="cls-2" clip-path="url(#logo-mask)">
            <g id="Layer_2" data-name="Layer 2">
              <g id="Layer_1-2" data-name="Layer 1">
                <g class="cls-3">
                  <path
                    class="cls-1"
                    d="M77.12,49.28c-.46,0-.93-.05-1.39-.16-3.8-.89-6.03-4.77-6.84-8.11-1.26-5.17-2.26-11.09-3-15.68-.44-2.75-2.66-18.1-3.08-21.01h-.04c-.37.99-1.55,7.45-2.25,11.31-.65,3.55-1.06,5.77-1.26,6.56-2.89,11.26-4.86,17.74-6.2,20.39-.96,1.9-3.09,3.16-5.33,3.08-2.19-.05-4.05-1.31-4.97-3.37-1.25-2.8-4.08-14.46-4.67-19.2-.16-1.31-1.22-2.14-2.13-2.25-1.39-.18-2.12,1.2-2.45,2.04-1.79,4.55-5.22,11.3-6.12,12.49-1.8,2.36-5.12,3.2-8.08,2.05-2.13-.83-3.01-2.62-3.72-4.05-.26-.52-.5-1-.78-1.42-.46-.68-1.25-1.23-1.84-1.26-2.53-.15-4.45-.12-6.67-.09-1.28.02-2.63.04-4.18.03C.94,30.62-.01,29.64,0,28.46c.01-1.18.97-2.13,2.15-2.13h.02c1.52.02,2.83,0,4.08-.03,2.21-.03,4.3-.07,6.99.09,2.33.14,4.19,1.72,5.16,3.16.44.65.77,1.32,1.06,1.91.55,1.1.88,1.74,1.44,1.95,1.16.45,2.46.18,3.09-.65.55-.75,3.73-6.85,5.54-11.45,1.55-3.95,4.63-5.03,6.99-4.73,3.02.38,5.48,2.9,5.86,5.99.56,4.6,3.32,15.72,4.32,17.97.24.54.62.81,1.14.82.53,0,1.17-.3,1.39-.72,1.16-2.3,3.14-8.87,5.87-19.52.18-.69.67-3.4,1.19-6.27,1.18-6.46,1.99-10.78,2.44-12.02.63-1.71,2.22-2.83,4.05-2.84,1.86.02,3.44,1.08,4.1,2.79l.09.23.03.24c.03.18,2.67,18.45,3.14,21.4.72,4.51,1.71,10.33,2.93,15.35.51,2.09,1.86,4.52,3.64,4.94,1.27.3,2.43-.8,2.97-1.95,1.67-3.56,4.37-16.71,4.74-19.02.43-2.6,2.61-4.51,5.44-4.74,2.85-.23,5.35,1.27,6.19,3.75.55,1.63,1.62,3.12,2.07,3.32,3.87,1.6,9.33,1.75,14.62.41,1.14-.29,2.32.4,2.61,1.55.29,1.15-.4,2.32-1.55,2.61-6.24,1.58-12.55,1.37-17.32-.6-2.83-1.17-4.34-5.43-4.51-5.91-.26-.76-1.23-.88-1.76-.84-.32.03-1.39.19-1.55,1.15-.2,1.21-2.99,15.65-5.09,20.14-1.3,2.77-3.83,4.47-6.45,4.47Z"
                  ></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </a>
    </div>
    <div class="col-start-2 hidden lg:flex justify-center items-center h-full">
    </div>
    <div class="justify-self-end col-span-1 row-span-1 z-40 col-start-3">
      <div
        class="items-center justify-center relative flex h-16 lg:w-24 lg:h-24"
      >
        <div class="menu-icon">
          <input id="menu-toggle" class="menu-icon__checkbox" type="checkbox" />
          <div>
            <span></span>
            <span></span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <nav
    id="navigation"
    class="items-center bottom-0 text-sm font-medium justify-center left-0 fixed right-0 top-0 flex h-screen z-30"
  >
    <div
      id="navigation-background"
      class="bg-white w-full h-full absolute top-0 left-0 opacity-0"
    >
    </div>
    <div
      class="items-center font-semibold flex-wrap justify-center flex flex-col overflow-hidden z-20 w-full"
    >
      <div class="flex flex-col items-start md:items-center pt-10">
        {
          header.pages.map((page, index) => (
            <a
              data-nav-item
              href={translatePath(currentLocale ?? defaultLocale, page.link)}
              class="items-center justify-start flex overflow-hidden gap-4 relative pr-10"
            >
              <div
                data-nav-border-reveal
                data-nav-text-reveal
                class="text-black items-center cursor-pointer justify-center pt-1 flex w-9 h-9 border-2 border-black border-solid rounded-full"
              >
                0{index + 1}
              </div>
              <div
                data-nav-text-reveal
                class="cursor-pointer overflow-hidden text-4xl xs:text-5xl md:text-[5.63rem] !leading-[1.15] text-black"
              >
                {page.title}
              </div>
            </a>
          ))
        }
        <!-- NOTE: language switching is disabled in both places that this note is found -->
        <!-- <div class="flex gap-8 pt-10 pl-16 md:pl-0">
          {
            locales.map((locale) => (
              <a
                href={getTranslatedUrl(locale)}
                class:list={[
                  "items-center justify-start flex overflow-hidden gap-4 relative cursor-pointer",
                  isActiveLocale(locale) && "active-locale",
                ]}
              >
                <span
                  data-nav-text-reveal
                  class="overflow-hidden text-md xs:text-lg md:text-xl !leading-[1.15] text-black"
                >
                  <span>{locale}</span>
                </span>
              </a>
            ))
          }
        </div> -->
      </div>
    </div>
  </nav>
</header>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  // Uncomment if you have premium version of gsap
  // import { SplitText } from "gsap/SplitText";
  // import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";
  import { BlurPlugin } from "@/utils/gsap-blur";
  import { LifecycleManager } from "@/utils/lifecycle-manager";

  gsap.registerPlugin(
    ScrollTrigger,
    /*SplitText, DrawSVGPlugin,*/
    BlurPlugin
  );

  const lm = new LifecycleManager();

  lm.onElementLoaded("navigation", (ctx) => {
    ctx?.add(() => {
      // Set initial state - logo fully visible
      gsap.set(".mask-rect", { width: 0 });

      gsap
        .timeline({
          defaults: {
            ease: "power1.inOut",
            duration: 0.5,
          },
          scrollTrigger: {
            trigger: "body",
            start: "50px",
            toggleActions: "play none none reverse",
          },
        })
        .to(".mask-rect", { width: "100%" }, "<")
        .set("#header-logo", { pointerEvents: "none" });

      const tl = gsap.timeline({
        paused: true,
        defaults: {
          duration: 1,
          ease: "power3.out",
        },
      });

      // const childSplit = new SplitText("[data-nav-text-reveal]", {
      // 	type: "lines",
      // 	linesClass: "split-child",
      // });
      // const parentSplit = new SplitText("[data-nav-text-reveal]", {
      // 	// type: "lines",
      // 	linesClass: "split-parent",
      // });

      tl.set("#navigation", { pointerEvents: "auto" })
        .to("#navigation-background", { opacity: 1 }, "<")
        .to(
          "[data-nav-text-reveal]",
          { opacity: 1, duration: 0.5, ease: "none" },
          "<=0.5"
        );
      // .from(
      // 	childSplit.lines,
      // 	{
      // 		duration: 1,
      // 		yPercent: 300,
      // 		skewY: 7,
      // 		stagger: 0.02,
      // 	},
      // 	"<",
      // );

      const menuItems = gsap.utils.toArray("[data-nav-item]") as HTMLElement[];

      menuItems.forEach((menuItem) => {
        const menuItemTl = gsap
          .timeline({
            defaults: { duration: 0.4, ease: "none" },
            paused: true,
          })
          .to(menuItem, {
            blur: 2,
          })
          .to(menuItem, {
            blur: 1,
          });
        menuItem.addEventListener("mouseenter", (e) => menuItemTl.play());
        menuItem.addEventListener("mouseleave", (e) => menuItemTl.pause(0));
      });

      // Get the checkbox
      const menuToggle = document.getElementById("menu-toggle");

      // Add an event listener to the checkbox
      menuToggle?.addEventListener("change", function () {
        if ((this as HTMLInputElement).checked) {
          tl.play();
        } else {
          tl.reverse();
        }
      });
    });
  });
</script>
